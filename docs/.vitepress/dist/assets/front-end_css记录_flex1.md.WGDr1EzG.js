import{_ as e,o as a,c as l,R as f}from"./chunks/framework.9GQK9YA0.js";const _=JSON.parse('{"title":"flex:1,flex:0,flex:auto,flex:auto","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/css记录/flex1.md","filePath":"front-end/css记录/flex1.md"}'),t={name:"front-end/css记录/flex1.md"},o=f('<h1 id="flex-1-flex-0-flex-auto-flex-auto" tabindex="-1">flex:1,flex:0,flex:auto,flex:auto <a class="header-anchor" href="#flex-1-flex-0-flex-auto-flex-auto" aria-label="Permalink to &quot;flex:1,flex:0,flex:auto,flex:auto&quot;">​</a></h1><p>[TOC]</p><h3 id="flex属性" tabindex="-1">flex属性 <a class="header-anchor" href="#flex属性" aria-label="Permalink to &quot;flex属性&quot;">​</a></h3><p>flex属性是flex-grow,flex:shrink,flex-basis三个属性的简写合并,默认值是0 1 auto flex-grow是如果有剩余空间，是否扩大，0为不扩大 flex-shrink是如果剩余空间不够，是否缩小，0为不缩小 flex-basis为项目本身的大小，默认值是auto</p><h5 id="flex-1" tabindex="-1">flex:1 <a class="header-anchor" href="#flex-1" aria-label="Permalink to &quot;flex:1&quot;">​</a></h5><p>flex:1对应的是flex:1 1 0% 表示的是可扩大可缩小 其中flex中的各个块是均分的，如果某个块多出来就会换行显示</p><h5 id="flex-auto" tabindex="-1">flex:auto <a class="header-anchor" href="#flex-auto" aria-label="Permalink to &quot;flex:auto&quot;">​</a></h5><p>flex:auto表示的是flex:1 1 auto 它的flex块的分布是按照内容的大小划分，而不是均分</p><h5 id="flex-0" tabindex="-1">flex:0 <a class="header-anchor" href="#flex-0" aria-label="Permalink to &quot;flex:0&quot;">​</a></h5><p>flex:0表示的是flex:0 1 0% 表示的是可缩小但是不可扩大 它的flex块是按照内容中的最小宽度来分的，比如内容是一段文本，那么块的宽度就是一个字的宽度</p><h5 id="flex-none" tabindex="-1">flex:none <a class="header-anchor" href="#flex-none" aria-label="Permalink to &quot;flex:none&quot;">​</a></h5><p>flex:none表示的是flex:0 0 auto 表示不可扩大和缩小 它的块的宽度就是内容的宽度</p>',12),x=[o];function r(n,s,i,h,u,c){return a(),l("div",null,x)}const p=e(t,[["render",r]]);export{_ as __pageData,p as default};
