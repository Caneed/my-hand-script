import{_ as e,o as t,c as a,R as o}from"./chunks/framework.9GQK9YA0.js";const u=JSON.parse('{"title":"回流和重绘","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/html记录/回流和重绘.md","filePath":"front-end/html记录/回流和重绘.md"}'),l={name:"front-end/html记录/回流和重绘.md"},i=o('<h1 id="回流和重绘" tabindex="-1">回流和重绘 <a class="header-anchor" href="#回流和重绘" aria-label="Permalink to &quot;回流和重绘&quot;">​</a></h1><p>[TOC]</p><h3 id="前置知识" tabindex="-1">前置知识 <a class="header-anchor" href="#前置知识" aria-label="Permalink to &quot;前置知识&quot;">​</a></h3><ol><li>浏览器使用的是流式布局(Flow Based Layout)</li><li>浏览器将 HTML 解析成 DOM,将 CSS 解析成 CSSOM,DOM 和 CSSOM 结合就产生了 Render Three(渲染树)</li><li>有的渲染树，就可以知道所有节点的样式，然后通过计算它们在页面上的大小和样式将它们渲染到页面上</li><li>由于浏览器使用的是流式布局，所以渲染树只需要一次循环就可以将元素渲染到页面上，但是 table 布局除外，table 布局有可能需要多次的循环和计算，通常要花的时间要比不用 table 布局长，所以要避免使用 table</li></ol><p><strong>回流必定引起重绘，但是重绘不一定引起回流</strong></p><h3 id="回流-reflow" tabindex="-1">回流(Reflow) <a class="header-anchor" href="#回流-reflow" aria-label="Permalink to &quot;回流(Reflow)&quot;">​</a></h3><p>当渲染树上的部分或者全部元素的尺寸，位置，结构发生改变时，浏览器重新渲染部分或者是所有页面的过程叫做回流</p><h3 id="重绘-repaint" tabindex="-1">重绘(Repaint) <a class="header-anchor" href="#重绘-repaint" aria-label="Permalink to &quot;重绘(Repaint)&quot;">​</a></h3><p>当渲染树上的结点的元素样式并不影响它的尺寸或者位置时，浏览器会赋予元素的新样式并重新绘制它，这个过程叫做重绘</p><h3 id="性能影响" tabindex="-1">性能影响 <a class="header-anchor" href="#性能影响" aria-label="Permalink to &quot;性能影响&quot;">​</a></h3><p>回流要比重绘的代价要大</p><p>现在的浏览器为了优化性能，会把回流和重绘的操作进行优化，它会把回流和重绘的操作放到一个队列中，当回流和重绘的操作的数量达到一定阀值或者到了一定时间时，才会触发队列的清空操作，这时浏览器会对回流和重绘进行一个批处理，这样可以将回流和重绘由多次变成一次。</p><p>当操作视口的时候会立即触发队列的清空操作</p><ul><li><p><code>clientWidth、clientHeight、clientTop、clientLeft</code></p></li><li><p><code>offsetWidth、offsetHeight、offsetTop、offsetLeft</code></p></li><li><p><code>scrollWidth、scrollHeight、scrollTop、scrollLeft</code></p></li><li><p><code>width、height</code></p></li><li><p><code>getComputedStyle()</code></p></li><li><p><code>getBoundingClientRect()</code></p></li></ul>',14),r=[i];function n(d,c,p,h,s,_){return t(),a("div",null,r)}const m=e(l,[["render",n]]);export{u as __pageData,m as default};
