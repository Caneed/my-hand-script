import{_ as i,o as t,c as d,R as n}from"./chunks/framework.9GQK9YA0.js";const y=JSON.parse('{"title":"display 的属性值和作用","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/css记录/display的属性值和作用.md","filePath":"front-end/css记录/display的属性值和作用.md"}'),l={name:"front-end/css记录/display的属性值和作用.md"},e=n('<h1 id="display-的属性值和作用" tabindex="-1">display 的属性值和作用 <a class="header-anchor" href="#display-的属性值和作用" aria-label="Permalink to &quot;display 的属性值和作用&quot;">​</a></h1><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>none</td><td>元素不显示并会从文档流移除</td></tr><tr><td>block</td><td>块类型，默认宽度为父元素宽度，换行显示</td></tr><tr><td>inline</td><td>行内类型，默认宽度为内容宽度，同行显示</td></tr><tr><td>inline-block</td><td>默认宽度为内容宽度，可以设置宽高，同行显示</td></tr><tr><td>list-item</td><td>像块元素一样显示，并且添加列表项样式</td></tr><tr><td>table</td><td>像块元素一样显示</td></tr><tr><td>inherit</td><td>从父元素继承 display 的值</td></tr></tbody></table><h3 id="block-inline-block-和-inline-的区别" tabindex="-1">block,inline-block 和 inline 的区别 <a class="header-anchor" href="#block-inline-block-和-inline-的区别" aria-label="Permalink to &quot;block,inline-block 和 inline 的区别&quot;">​</a></h3><p>（1）block： 会独占一行，多个元素会另起一行，可以设置 width、height、margin 和 padding 属性； （2）inline： 元素不会独占一行，设置 width、height 属性无效。但可以设置水平方向的 margin 和 padding 属性，不能设置垂直方向的 padding 和 margin； （3）inline-block： 将对象设置为 inline 对象，但对象的内容作为 block 对象呈现，之后的内联对象会被排列在同一行内。 对于行内元素和块级元素，其特点如下： （1）行内元素</p><p>设置宽高无效； 可以设置水平方向的 margin 和 padding 属性，不能设置垂直方向的 padding 和 margin； 不会自动换行；</p><p>（2）块级元素</p><p>可以设置宽高； 设置 margin 和 padding 都有效； 可以自动换行； 多个块状，默认排列从上到下。</p><h3 id="display-none-和-visibility-hidden-的区别" tabindex="-1">display:none 和 visibility:hidden 的区别 <a class="header-anchor" href="#display-none-和-visibility-hidden-的区别" aria-label="Permalink to &quot;display:none 和 visibility:hidden 的区别&quot;">​</a></h3><ul><li>在渲染树中</li></ul><p>display:none 会让元素完全从渲染树中消失，渲染时不会占据任何空间； visibility:hidden 不会让元素从渲染树中消失，渲染的元素还会占据相应的空间，只是内容不可见。</p><ul><li>是否是继承属性</li></ul><p>display:none 是非继承属性，子孙节点会随着父节点从渲染树消失，通过修改子孙节点的属性也无法显示； visibility:hidden 是继承属性，子孙节点消失是由于继承了 hidden，通过设置 visibility:visible 可以让子孙节点显示；</p><ul><li><p>修改常规文档流中元素的 display 通常会造成文档的重排，但是修改 visibility 属性只会造成本元素的重绘；</p></li><li><p>如果使用读屏器，设置为 display:none 的内容不会被读取，设置为 visibility:hidden 的内容会被读取。</p></li></ul>',13),a=[e];function s(o,r,p,h,c,b){return t(),d("div",null,a)}const m=i(l,[["render",s]]);export{y as __pageData,m as default};
