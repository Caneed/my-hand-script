import{_ as e,o as t,c as a,R as o}from"./chunks/framework.9GQK9YA0.js";const b=JSON.parse('{"title":"脱离文档流的原理","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/css记录/脱离文档流的原理.md","filePath":"front-end/css记录/脱离文档流的原理.md"}'),r={name:"front-end/css记录/脱离文档流的原理.md"},l=o('<h1 id="脱离文档流的原理" tabindex="-1">脱离文档流的原理 <a class="header-anchor" href="#脱离文档流的原理" aria-label="Permalink to &quot;脱离文档流的原理&quot;">​</a></h1><p>float 的作用是为了脱离文档流，而脱离文档流的原理则是指将盒子从普通的布局种脱离出来，其它的盒子会认为该盒子不存在而忽略它进行排版，脱离文档流主要分为两种</p><ul><li>完全脱离文档流:例如 position:absolute,使用绝对定位的盒子，其它的盒子在排版时会认为此盒子不存在而进行布局</li><li>部分脱离文档流:例如 float 盒子，其它的盒子会认为它不存在于文档流，而盒子内部的 inline-block 或者 inline 的元素会认为它依旧存在而为它让出位置.</li></ul><h3 id="clear-both" tabindex="-1">clear:both <a class="header-anchor" href="#clear-both" aria-label="Permalink to &quot;clear:both&quot;">​</a></h3><p>clear:both 是作用于添加属性的盒子本身的 在一个盒子上添加 clear:both 意味着这个盒子的顶边框将会低于在它之前的任何浮动盒子的底外边距。</p><p>所以 clear:both 并不是清除浮动，而是清除浮动所造成的影响，浮动的盒子依旧是部分脱离文档流的。</p><p>而 clear 的取值是 left 还是 right,在我看来是取决于想要低于的那个浮动盒子的浮动方向。而 both 的取值，则会低于所有在在它之前的任何浮动盒子</p>',7),c=[l];function n(_,s,i,h,d,p){return t(),a("div",null,c)}const u=e(r,[["render",n]]);export{b as __pageData,u as default};
